async function reedSolomonEndpoint(bitString) {
  // Endpoint URL (assuming Flask is running locally on port 5000)
  const endpointUrl = "http://localhost:5000/qr-reed-solomon";

  // Data to send in the request body as JSON
  const data = {
    bit_string: bitString,
  };

  // Options for the fetch request
  const requestOptions = {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(data),
  };
  // Send the POST request to the endpoint
  return await fetch(endpointUrl, requestOptions)
    .then((response) => {
      if (!response.ok) {
        throw new Error("Network response was not ok");
      }
      return response.json();
    })
    .then((data) => {
      return data.bits_ecc;
    })
    .catch((error) => {
      // Handle errors
      console.error("There was a problem with the fetch operation:", error);
    });
}

function numberToByteString(number) {
  // Ensure number is within valid byte range (0 to 255)
  if (number < 0 || number > 255 || !Number.isInteger(number)) {
    throw new Error("Number must be an integer between 0 and 255.");
  }

  // Convert number to byte string (8 bits)
  return number.toString(2).padStart(8, "0");
}

function deleteLastCharacters(str, count) {
  if (count <= 0) {
    return str; // If count is 0 or negative, return the original string
  }

  let result = str;
  for (let i = 0; i < count; i++) {
    result = result.slice(0, -8); // Delete the last 8 characters
  }
  return result;
}

function traverseDataCoordinates(qrArr, input = "", xor = false) {
  // [0] x ---> [24]
  //  y
  //  |
  //  |
  //  V
  // [24]

  //[x,y]

  let pathArr = [
    [24, 24],
    [23, 24],
    [24, 23],
    [23, 23],
    [24, 22],
    [23, 22],
    [24, 21],
    [23, 21],
    [24, 20],
    [23, 20],
    [24, 19],
    [23, 19],
    [24, 18],
    [23, 18],
    [24, 17],
    [23, 17],
    [24, 16],
    [23, 16],
    [24, 15],
    [23, 15],
    [24, 14],
    [23, 14],
    [24, 13],
    [23, 13],
    [24, 12],
    [23, 12],
    [24, 11],
    [23, 11],
    [24, 10],
    [23, 10],
    [24, 9],
    [23, 9],
    [22, 9],
    [21, 9],
    [22, 10],
    [21, 10],
    [22, 11],
    [21, 11],
    [22, 12],
    [21, 12],
    [22, 13],
    [21, 13],
    [22, 14],
    [21, 14],
    [22, 15],
    [21, 15],
    [22, 16],
    [21, 16],
    [22, 17],
    [21, 17],
    [22, 18],
    [21, 18],
    [22, 19],
    [21, 19],
    [22, 20],
    [21, 20],
    [22, 21],
    [21, 21],
    [22, 22],
    [21, 22],
    [22, 23],
    [21, 23],
    [22, 24],
    [21, 24],
    [20, 24],
    [19, 24],
    [20, 23],
    [19, 23],
    [20, 22],
    [19, 22],
    [20, 21],
    [19, 21],
    [20, 15],
    [19, 15],
    [20, 14],
    [19, 14],
    [20, 13],
    [19, 13],
    [20, 12],
    [19, 12],
    [20, 11],
    [19, 11],
    [20, 10],
    [19, 10],
    [20, 9],
    [19, 9],
    [18, 9],
    [17, 9],
    [18, 10],
    [17, 10],
    [18, 11],
    [17, 11],
    [18, 12],
    [17, 12],
    [18, 13],
    [17, 13],
    [18, 14],
    [17, 14],
    [18, 15],
    [17, 15],
    [18, 21],
    [17, 21],
    [18, 22],
    [17, 22],
    [18, 23],
    [17, 23],
    [18, 24],
    [17, 24],
    [16, 24],
    [15, 24],
    [16, 23],
    [15, 23],
    [16, 22],
    [15, 22],
    [16, 21],
    [15, 21],
    [15, 20],
    [15, 19],
    [15, 18],
    [15, 17],
    [15, 16],
    [16, 15],
    [15, 15],
    [16, 14],
    [15, 14],
    [16, 13],
    [15, 13],
    [16, 12],
    [15, 12],
    [16, 11],
    [15, 11],
    [16, 10],
    [15, 10],
    [16, 9],
    [15, 9],
    [16, 8],
    [15, 8],
    [16, 7],
    [15, 7],
    [16, 5],
    [15, 5],
    [16, 4],
    [15, 4],
    [16, 3],
    [15, 3],
    [16, 2],
    [15, 2],
    [16, 1],
    [15, 1],
    [16, 0],
    [15, 0],
    [14, 0],
    [13, 0],
    [14, 1],
    [13, 1],
    [14, 2],
    [13, 2],
    [14, 3],
    [13, 3],
    [14, 4],
    [13, 4],
    [14, 5],
    [13, 5],
    [14, 7],
    [13, 7],
    [14, 8],
    [13, 8],
    [14, 9],
    [13, 9],
    [14, 10],
    [13, 10],
    [14, 11],
    [13, 11],
    [14, 12],
    [13, 12],
    [14, 13],
    [13, 13],
    [14, 14],
    [13, 14],
    [14, 15],
    [13, 15],
    [14, 16],
    [13, 16],
    [14, 17],
    [13, 17],
    [14, 18],
    [13, 18],
    [14, 19],
    [13, 19],
    [14, 20],
    [13, 20],
    [14, 21],
    [13, 21],
    [14, 22],
    [13, 22],
    [14, 23],
    [13, 23],
    [14, 24],
    [13, 24],
    [12, 24],
    [11, 24],
    [12, 23],
    [11, 23],
    [12, 22],
    [11, 22],
    [12, 21],
    [11, 21],
    [12, 20],
    [11, 20],
    [12, 19],
    [11, 19],
    [12, 18],
    [11, 18],
    [12, 17],
    [11, 17],
    [12, 16],
    [11, 16],
    [12, 15],
    [11, 15],
    [12, 14],
    [11, 14],
    [12, 13],
    [11, 13],
    [12, 12],
    [11, 12],
    [12, 11],
    [11, 11],
    [12, 10],
    [11, 10],
    [12, 9],
    [11, 9],
    [12, 8],
    [11, 8],
    [12, 7],
    [11, 7],
    [12, 5],
    [11, 5],
    [12, 4],
    [11, 4],
    [12, 3],
    [11, 3],
    [12, 2],
    [11, 2],
    [12, 1],
    [11, 1],
    [12, 0],
    [11, 0],
    [10, 0],
    [9, 0],
    [10, 1],
    [9, 1],
    [10, 2],
    [9, 2],
    [10, 3],
    [9, 3],
    [10, 4],
    [9, 4],
    [10, 5],
    [9, 5],
    [10, 7],
    [9, 7],
    [10, 8],
    [9, 8],
    [10, 9],
    [9, 9],
    [10, 10],
    [9, 10],
    [10, 11],
    [9, 11],
    [10, 12],
    [9, 12],
    [10, 13],
    [9, 13],
    [10, 14],
    [9, 14],
    [10, 15],
    [9, 15],
    [10, 16],
    [9, 16],
    [10, 17],
    [9, 17],
    [10, 18],
    [9, 18],
    [10, 19],
    [9, 19],
    [10, 20],
    [9, 20],
    [10, 21],
    [9, 21],
    [10, 22],
    [9, 22],
    [10, 23],
    [9, 23],
    [10, 24],
    [9, 24],
    [8, 16],
    [7, 16],
    [8, 15],
    [7, 15],
    [8, 14],
    [7, 14],
    [8, 13],
    [7, 13],
    [8, 12],
    [7, 12],
    [8, 11],
    [7, 11],
    [8, 10],
    [7, 10],
    [8, 9],
    [7, 9],
    [5, 9],
    [4, 9],
    [5, 10],
    [4, 10],
    [5, 11],
    [4, 11],
    [5, 12],
    [4, 12],
    [5, 13],
    [4, 13],
    [5, 14],
    [4, 14],
    [5, 15],
    [4, 15],
    [5, 16],
    [4, 16],
    [3, 16],
    [2, 16],
    [3, 15],
    [2, 15],
    [3, 14],
    [2, 14],
    [3, 13],
    [2, 13],
    [3, 12],
    [2, 12],
    [3, 11],
    [2, 11],
    [3, 10],
    [2, 10],
    [3, 9],
    [2, 9],
    [1, 9],
    [0, 9],
    [1, 10],
    [0, 10],
    [1, 11],
    [0, 11],
    [1, 12],
    [0, 12],
    [1, 13],
    [0, 13],
    [1, 14],
    [0, 14],
    [1, 15],
    [0, 15],
    [1, 16],
    [0, 16],
  ];
  for (let i = 0; i < pathArr.length; i++) {
    if (input.length > 0) {
      qrArr[pathArr[i][1]][pathArr[i][0]] = input[i];
    } else if (xor == true) {
      let xorBit = "0";
      if (pathArr[i][0] % 2 == 0 && pathArr[i][1] % 2 == 0) {
        xorBit = "1";
      } else if (pathArr[i][0] % 2 != 0 && pathArr[i][1] % 2 != 0) {
        xorBit = "1";
      }

      if (xorBit == qrArr[pathArr[i][1]][pathArr[i][0]]) {
        qrArr[pathArr[i][1]][pathArr[i][0]] = "0";
      } else {
        qrArr[pathArr[i][1]][pathArr[i][0]] = "1";
      }
    }
  }

  return qrArr;
}

async function generateQRCode() {
  const canvas = document.getElementById("qrcode");
  canvas.style.display = "block";
  const ctx = canvas.getContext("2d");
  const text = document.getElementById("text").value;

  // Simple encoding of the text into a binary string
  const binaryData = text
    .split("")
    .map((char) => char.charCodeAt(0).toString(2).padStart(8, "0"))
    .join("");

  console.log(binaryData);

  let mode = "0100";
  let count = numberToByteString(text.length);
  let terminator = "0000";
  let bitPadding = deleteLastCharacters(
    "1110110000010001111011000001000111101100000100011110110000010001111011000001000111101100000100011110110000010001111011000001000111101100000100011110110000010001111011000001000111101100000100011110110000010001111011000001000111101100000100011110110000010001",
    text.length
  );

  let processedBinaryData = mode + count + binaryData + terminator + bitPadding;
  console.log(processedBinaryData);
  let total_encode = await reedSolomonEndpoint(processedBinaryData);
  console.log(total_encode);

  // Set QR code dimensions
  const qrSize = 25;
  const moduleSize = 10;

  // Initialize 2D array for QR code
  // let qrCodeArray = [
  // ['1','1','1','1','1','1','1','0','0','0','0','0','0','0','0','0','0','0','1','1','1','1','1','1','1'],
  // ['1','0','0','0','0','0','1','0','0','0','0','0','0','0','0','0','0','0','1','0','0','0','0','0','1'],
  // ['1','0','1','1','1','0','1','0','1','0','0','0','0','0','0','0','0','0','1','0','1','1','1','0','1'],
  // ['1','0','1','1','1','0','1','0','0','0','0','0','0','0','0','0','0','0','1','0','1','1','1','0','1'],
  // ['1','0','1','1','1','0','1','0','0','0','0','0','0','0','0','0','0','0','1','0','1','1','1','0','1'],
  // ['1','0','0','0','0','0','1','0','0','0','0','0','0','0','0','0','0','0','1','0','0','0','0','0','1'],
  // ['1','1','1','1','1','1','1','0','1','0','1','0','1','0','1','0','1','0','1','1','1','1','1','1','1'],
  // ['0','0','0','0','0','0','0','0','1','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],
  // ['1','1','1','0','1','1','1','1','1','0','0','0','0','0','0','0','0','1','1','0','0','0','1','0','0'],
  // ['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],
  // ['0','0','0','0','0','0','1','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],
  // ['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],
  // ['0','0','0','0','0','0','1','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],
  // ['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],
  // ['0','0','0','0','0','0','1','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],
  // ['0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],
  // ['0','0','0','0','0','0','1','0','0','0','0','0','0','0','0','0','1','1','1','1','1','0','0','0','0'],
  // ['0','0','0','0','0','0','0','0','1','0','0','0','0','0','0','0','1','0','0','0','1','0','0','0','0'],
  // ['1','1','1','1','1','1','1','0','1','0','0','0','0','0','0','0','1','0','1','0','1','0','0','0','0'],
  // ['1','0','0','0','0','0','1','0','1','0','0','0','0','0','0','0','1','0','0','0','1','0','0','0','0'],
  // ['1','0','1','1','1','0','1','0','1','0','0','0','0','0','0','0','1','1','1','1','1','0','0','0','0'],
  // ['1','0','1','1','1','0','1','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],
  // ['1','0','1','1','1','0','1','0','1','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],
  // ['1','0','0','0','0','0','1','0','1','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],
  // ['1','1','1','1','1','1','1','0','1','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'],
  // ];
  let qrCodeArray = [
    [
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
    ],
    [
      "1",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1",
    ],
    [
      "1",
      "0",
      "1",
      "1",
      "1",
      "0",
      "1",
      "0",
      "1",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1",
      "0",
      "1",
      "1",
      "1",
      "0",
      "1",
    ],
    [
      "1",
      "0",
      "1",
      "1",
      "1",
      "0",
      "1",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1",
      "0",
      "1",
      "1",
      "1",
      "0",
      "1",
    ],
    [
      "1",
      "0",
      "1",
      "1",
      "1",
      "0",
      "1",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1",
      "0",
      "1",
      "1",
      "1",
      "0",
      "1",
    ],
    [
      "1",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1",
    ],
    [
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "0",
      "1",
      "0",
      "1",
      "0",
      "1",
      "0",
      "1",
      "0",
      "1",
      "0",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
    ],
    [
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
    ],
    [
      "1",
      "1",
      "1",
      "0",
      "1",
      "1",
      "1",
      "1",
      "1",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1",
      "1",
      "0",
      "0",
      "0",
      "1",
      "0",
      "0",
    ],
    [
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
    ],
    [
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
    ],
    [
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
    ],
    [
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
    ],
    [
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
    ],
    [
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
    ],
    [
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
    ],
    [
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1",
      "1",
      "1",
      "1",
      "1",
      "0",
      "0",
      "0",
      "0",
    ],
    [
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1",
      "0",
      "0",
      "0",
      "1",
      "0",
      "0",
      "0",
      "0",
    ],
    [
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "0",
      "1",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1",
      "0",
      "1",
      "0",
      "1",
      "0",
      "0",
      "0",
      "0",
    ],
    [
      "1",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1",
      "0",
      "1",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1",
      "0",
      "0",
      "0",
      "1",
      "0",
      "0",
      "0",
      "0",
    ],
    [
      "1",
      "0",
      "1",
      "1",
      "1",
      "0",
      "1",
      "0",
      "1",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1",
      "1",
      "1",
      "1",
      "1",
      "0",
      "0",
      "0",
      "0",
    ],
    [
      "1",
      "0",
      "1",
      "1",
      "1",
      "0",
      "1",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
    ],
    [
      "1",
      "0",
      "1",
      "1",
      "1",
      "0",
      "1",
      "0",
      "1",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
    ],
    [
      "1",
      "0",
      "0",
      "0",
      "0",
      "0",
      "1",
      "0",
      "1",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
    ],
    [
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "1",
      "0",
      "1",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
      "0",
    ],
  ];

  console.log(qrCodeArray);

  qrCodeArray = traverseDataCoordinates(qrCodeArray, total_encode);

  qrCodeArray = traverseDataCoordinates(qrCodeArray, "", true);

  // Set canvas dimensions
  canvas.width = qrSize * moduleSize;
  canvas.height = qrSize * moduleSize;

  // Draw QR code on the canvas
  for (let i = 0; i < qrSize; i++) {
    for (let j = 0; j < qrSize; j++) {
      const bit = qrCodeArray[i][j];
      ctx.fillStyle = bit === "1" ? "#000" : "#fff";
      ctx.fillRect(j * moduleSize, i * moduleSize, moduleSize, moduleSize);
    }
  }
}

// generateQRCode();

function downloadQRCode() {
  const canvas = document.getElementById("qrcode");
  const link = document.createElement("a");
  link.href = canvas.toDataURL("image/png");
  link.download = "qrcode.png";
  link.click();
}
